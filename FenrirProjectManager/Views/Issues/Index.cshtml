@using DataAccessImplementation
@using FenrirProjectManager.Helpers
@using Microsoft.AspNet.Identity
@using Model.Consts
@using Model.Enums
@model IEnumerable<Model.Models.Issue>
@{
    UserRepo _userRepo = new UserRepo();
}

@{
    if (Model.Any(m => m != null))
    {
        <table class="striped">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Title)
                </th>
                <th>
                    Assigned to

                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Type)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Progress)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FinishDate)
                </th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>

                        @{
                            var assignedUser = _userRepo.GetUserById(item.AssignUserId);
                        }

                        <img src="data:image/png;base64,@Html.Raw(Convert.ToBase64String(assignedUser.Avatar))"
                             class="rounded responsive-img tooltipped"
                             style="max-height: 50px"
                             data-position="bottom"
                             data-delay="50"
                             data-tooltip="@Html.Raw($"{assignedUser.Email}")" />
                    </td>
                    <td>
                        @{
                            switch (item.Type)
                            {
                                case IssueType.Feature:
                                    <img src="data:image/png;base64, @Html.Raw(Convert.ToBase64String(ImageManager.GetByteArray(Resources.Images.rocket)))"
                                         class="responsive-img tooltipped"
                                         data-position="bottom"
                                         data-delay="50"
                                         data-tooltip=@Html.DisplayFor(modelItem => item.Type) />
                                    break;
                                case IssueType.Bug:
                                    <img src="data:image/png;base64, @Html.Raw(Convert.ToBase64String(ImageManager.GetByteArray(Resources.Images.bug)))"
                                         class="responsive-img tooltipped"
                                         data-position="bottom"
                                         data-delay="50"
                                         data-tooltip=@Html.DisplayFor(modelItem => item.Type) />
                                    break;
                                case IssueType.Test:
                                    <img src="data:image/png;base64, @Html.Raw(Convert.ToBase64String(ImageManager.GetByteArray(Resources.Images.beaker_outline)))"
                                         class="responsive-img tooltipped"
                                         data-position="bottom"
                                         data-delay="50"
                                         data-tooltip=@Html.DisplayFor(modelItem => item.Type) />
                                    break;
                            }
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Progress)
                    </td>
                    <td>
                        @{
                            string formatedDate = $"{Html.DisplayFor(modelItem => item.FinishDate):yy-MM-dd}";
                        }
                        @Html.Raw(formatedDate)
                    </td>
                </tr>
            }

        </table>
    }
    else
    {
        if (User.IsInRole(Consts.ProjectManagerRole) || User.IsInRole(Consts.AdministratorRole))
        {
            <div class="row center">
                <h5>
                    No issues to show, but don't worry you can <a class="blue-text green-hover hover-animation" href="@Url.Action(MVC.Issues.Create())">add a new issue</a>
                </h5>
            </div>
        }
    }
}
