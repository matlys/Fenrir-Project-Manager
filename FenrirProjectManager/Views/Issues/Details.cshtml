@using DataAccessImplementation
@using FenrirProjectManager.Helpers
@using Microsoft.AspNet.Identity
@using Model.Enums
@model Model.Models.Issue

@{
    UserRepo _userRepo = new UserRepo();
}

<div class="row">
    <div class="col l9 m12 s12">
        <h3>@Html.DisplayFor(model => model.Title)</h3>
    </div>

    <div class="center-align col l3 m12 s12">
        @{
            var assignedUser = _userRepo.GetUserById(Model.AssignUserId);
            var createdUser = _userRepo.GetUserById(Model.CreateUserId);
        }
        <h3>
            <img src="data:image/png;base64,@Html.Raw(Convert.ToBase64String(createdUser.Avatar))"
                 class="rounded responsive-img tooltipped"
                 style="max-height: 50px"
                 data-position="bottom"
                 data-delay="50"
                 data-tooltip="@Html.Raw($"{createdUser.Email}")"/>

            <img src="data:image/png;base64,@Html.Raw(Convert.ToBase64String(ImageManager.GetByteArray(Resources.Images.assigned_to)))"
                 class="responsive-img"
                 style="vertical-align: top;"/>

            <img src="data:image/png;base64,@Html.Raw(Convert.ToBase64String(assignedUser.Avatar))"
                 class="rounded responsive-img tooltipped"
                 style="max-height: 50px"
                 data-position="bottom"
                 data-delay="50"
                 data-tooltip="@Html.Raw($"{assignedUser.Email}")" />

        </h3>
    </div>
</div>

<div class="row">
    <div class="col l12 m12 s12">
        @Html.DisplayFor(model => model.Description)
    </div>
</div>

<div class="row">

    <div class="center-align col l3 m12 s12">
        <img src="data:image/png;base64, @Html.Raw(Convert.ToBase64String(ImageManager.GetByteArray(Resources.Images.create_date)))"
             class="responsive-img"
             style="vertical-align: middle;"/>
        @{
            string formatedCreationDate = string.Format("{0:d}", Model.CreationDate);
        }
        @Html.Raw(formatedCreationDate)
    </div>

    <div class="center-align col l3 m12 s12">
        <img src="data:image/png;base64, @Html.Raw(Convert.ToBase64String(ImageManager.GetByteArray(Resources.Images.deadline_date)))"
             class="responsive-img"
             style="vertical-align: middle;"/>
        @{
            string formatedFinishDate = string.Format("{0:d}", Model.FinishDate);
        }
        @Html.Raw(formatedFinishDate)
    </div>

    <div class="center-align col l2 m12 s12">
        @{
            byte[] issueType = {};

            switch (Model.Type)
            {
                case IssueType.Feature:
                    issueType = ImageManager.GetByteArray(Resources.Images.feature);
                    break;
                case IssueType.Bug:
                    issueType = ImageManager.GetByteArray(Resources.Images.bug);
                    break;
                case IssueType.Test:
                    issueType = ImageManager.GetByteArray(Resources.Images.test);
                    break;
            }
        }

        <img src="data:image/png;base64, @Html.Raw(Convert.ToBase64String(issueType))"
             class="responsive-img tooltipped"
             style="margin-top: 0"
             data-position="bottom"
             data-delay="50"
             data-tooltip="@Html.DisplayFor(model => model.Type)"/>
    </div>

    <div class="center-align col l2 m12 s12">
        @{
            int issueProgress = (int) Model.Progress;
        }
        <strong style="font-size: 36px;"> @Html.Raw(issueProgress)% </strong>
    </div>

    <div class="center-align col l2 m12 s12">

        @{
            byte[] issueStatus = {};

            switch (Model.Status)
            {
                case IssueStatus.New:
                    issueStatus = ImageManager.GetByteArray(Resources.Images.status_start);
                    break;
                case IssueStatus.InProgress:
                    issueStatus = ImageManager.GetByteArray(Resources.Images.status_in_progress);
                    break;
                case IssueStatus.Finished:
                    issueStatus = ImageManager.GetByteArray(Resources.Images.status_finished);
                    break;
                case IssueStatus.Closed:
                    issueStatus = ImageManager.GetByteArray(Resources.Images.status_finished);
                    break;
                case IssueStatus.Checking:
                    issueStatus = ImageManager.GetByteArray(Resources.Images.status_finished);
                    break;
                case IssueStatus.ReOpen:
                    issueStatus = ImageManager.GetByteArray(Resources.Images.status_finished);
                    break;
            }
        }
        <img src="data:image/png;base64, @Html.Raw(Convert.ToBase64String(issueStatus))"
             class="responsive-img tooltipped"
             style="margin-top: 0"
             data-position="bottom"
             data-delay="50"
             data-tooltip="@Html.DisplayFor(model => model.Status)" />
    </div>

</div>

<div class="center row">

    <a class="btn grey waves-effect waves-light" href="@Url.Action(MVC.Issues.Index())">Cancel</a>

    @{
        // if this issue belong to create user
        if (createdUser.Id == User.Identity.GetUserId())
        {
            <a class="btn blue lighten-1 waves-effect waves-light" href="@Url.Action(MVC.Issues.Edit(Model.Id))">Edit</a>
        }

        if (assignedUser.Id == User.Identity.GetUserId())
        {
            <a class="btn brown lighten-1 waves-effect waves-light" href="@Url.Action(MVC.Issues.Update(Model.Id))">Update</a>
        }
    }

</div>

